openapi: '3.0.3'
info:
  title: API d'administration de l'infrastructure du Centre d'expertise appliquée en innovation du CQEN
  description: Cet API permet d'administrer l'infrastructure d'expérimentation afin de supporter l'offre de services de laboratoires.
  version: '1.0'
servers:
  - url: /
components:
  schemas:
    User:
      type: object
      required:
        - "firstname"
        - "lastname"
        - "email"
        - "organisation"
        - "infrarole"
      properties:
        firstname:
          type: string
        lastname:
          type: string
        email:
          type: string
          format: email
        organisation: 
          type: string
        infrarole:
          type: string
          enum:
            - Admin
            - Developer
          default: Developer
        disabled: 
          type: boolean
          default: false
    UserWithLabs:
      allOf:
      - $ref: '#/components/schemas/User'
      - type: object
        properties:
          laboratories:
            type: array
            items: 
              $ref: '#/components/schemas/LaboratoryRole'
    Laboratory:
      type: object
      required: 
        - "id"
        - "displayname"
        - "description"
      properties:
        id:
          type: string
        displayname:
          type: string
        description:
          type: string
        gitrepo:
          type: string
        users:
          type: array
          items: 
            $ref: '#/components/schemas/LaboratoryUser'
        openshiftprojects:
          type: array
          items: 
            $ref: '#/components/schemas/OpenshiftProject'
    LaboratoryUser:
      type: object
      required:
        - "email"
        - "role"
      properties:
        email:
          type: string
          format: email
        role:
          type: string
          enum:
            - admin
            - developer
    LaboratoryRole:
      type: object
      required:
        - "laboratory"
        - "role"
      properties:
        laboratory:
          type: string
        role:
          type: string
          enum:
            - Admin
            - Developer
    OpenshiftProject:
      type: object
      required: 
        - "id"
        - "displayname"
        - "description"
      properties:
        id:
          type: string
        displayname:
          type: string
        description:
          type: string     
paths:
  /user:
    get:
      operationId: GetUsers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/User'
    post:
      operationId: CreateUser
      description: >-
        Create a user in the environment.
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: OK
  /user/{username}:
    get:
      operationId: GetUserFromUsername
      description: >-
        Get a user from its username.
      parameters:
        - name: username
          in: path
          description: The username of the targetted user.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserWithLabs'
    put:
      operationId: UpdateUser
      description: >-
        Update a user.
      parameters:
        - name: username
          in: path
          description: The username of the targetted user.
          required: true
          schema:
            type: string
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      operationId: DeleteUser
      description: >-
        Delete a user.
      parameters:
        - name: username
          in: path
          description: The username of the targetted user.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
  /laboratory:
    get:
      operationId: GetLaboratories
      description: >-
        Get the list of laboratories contained in the environment.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Laboratory'
    post:
      operationId: CreateLaboratory
      description: >-
        Create the entire laboratory. That includes : users, projects, source code repository, etc.
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Laboratory'
      responses:
        '200':
          description: OK
  /laboratory/{laboratoryid}:
    get:
      operationId: GetLaboratoryFromId
      description: >-
        Get a laboratory from its identifier.
      parameters:
        - name: laboratoryid
          in: path
          description: The identifier of the targetted laboratory.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Laboratory'
    put:
      operationId: UpdateLaboratory
      description: >-
        Update the attributes of a laboratory.
      parameters:
        - name: laboratoryid
          in: path
          description: The identifier of the targetted laboratory.
          required: true
          schema:
            type: string
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Laboratory'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Laboratory'
    delete:
      operationId: DeleteLaboratory
      description: >-
        This endpoint deletes a laboratory. 
      parameters:
        - name: laboratoryid
          in: path
          description: The identifier of the targetted laboratory.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
  /openshift/project:
    get:
      operationId: GetProjects
      description: >-
       Get the list of projects defined in Openshift.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/OpenshiftProject'
    post:
      operationId: CreateProject
      description: >-
        Create a project in Openshift.
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/OpenshiftProject'
      responses:
        '200':
          description: OK
  /openshift/project/{projectid}:
    get:
      operationId: GetProjectFromId
      description: >-
        Get a project from its identifier in Openshift.
      parameters:
        - name: projectid
          in: path
          description: The identifier of the targetted project.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenshiftProject'
    put:
      operationId: UpdateProject
      description: >-
        Update the attributes of a project Openshift.
      parameters:
        - name: projectid
          in: path
          description: The identifier of the targetted project.
          required: true
          schema:
            type: string
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/OpenshiftProject'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenshiftProject'
    delete:
      operationId: DeleteProject
      description: >-
        Delete a project in Openshift. 
      parameters:
        - name: projectid
          in: path
          description: The identifier of the targetted project.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
