openapi: '3.0.3'
info:
  title: API d'administration de l'infrastructure du Centre d'expertise appliquée en innovation du CQEN
  description: Cet API permet d'administrer l'infrastructure d'expérimentation afin de supporter l'offre de services de laboratoires.
  version: '1.0'
servers:
  - url: /
components:
  schemas:
    User:
      type: object
      required:
        - firstname
        - lastname
        - email
        - organisation
        - infrarole
      properties:
        firstname:
          type: string
        lastname:
          type: string
        email:
          type: string
          format: email
        organisation: 
          type: string
        infrarole:
          type: string
          enum:
            - Admin
            - Developer
          default: Developer
        disabled: 
          type: boolean
          default: false
    UserUpdate:
      type: object
      properties:
        firstname:
          type: string
        lastname:
          type: string
        organisation: 
          type: string
        infrarole:
          type: string
          enum:
            - Admin
            - Developer
        disabled: 
          type: boolean
    UserWithLabs:
      allOf:
      - $ref: '#/components/schemas/User'
      - type: object
        properties:
          laboratories:
            type: array
            items: 
              $ref: '#/components/schemas/Laboratory'
    AuthenticatedUser:
      type: object
      properties:
        username:
          type: string
        roles:
          type: string
    Laboratory:
      type: object
      required: 
        - id
        - displayname
        - type
      properties:
        id:
          type: string
        displayname:
          type: string
        description:
          type: string
        gitrepo:
          type: string
        type:
          type: string
          enum:
            - projet
            - experimentation
    LaboratoryUpdate:
      type: object
      properties:
        displayname:
          type: string
        description:
          type: string
        gitrepo:
          type: string
        type:
          type: string
          enum:
            - projet
            - experimentation
    LaboratoryWithUsers:
      allOf:
        - $ref: '#/components/schemas/Laboratory'
        - type: object
          properties:
            users:
              type: array
              items: 
                type: string
                format: email
    LaboratoryWithResources:
      allOf:
        - $ref: '#/components/schemas/LaboratoryWithUsers'
        - type: object
          properties:
            openshiftprojects:
              type: array
              items: 
                $ref: '#/components/schemas/OpenshiftProject'
            AWSAccounts:
              type: array
              items:
                $ref: '#/components/schemas/AWSAccount' 
    OpenshiftProject:
      type: object
      required: 
        - id
        - displayname
        - description
      properties:
        id:
          type: string
        displayname:
          type: string
        description:
          type: string
    OpenshiftProjectWithLab:
      allOf:
      - $ref: '#/components/schemas/OpenshiftProject'
      - type: object
        required:
          - idLab
        properties:
          idLab:
            type: string
    OpenshiftProjectWithMeta:
      allOf:
      - $ref: '#/components/schemas/OpenshiftProjectWithLab'
      - type: object
        properties:
          requester:
            type: string
          creationDate:
            type: string
            format: date-time
    OpenshiftProjectUpdate:
      type: object
      properties:
        displayname:
          type: string
        description:
          type: string
        idLab:
          type: string
    AWSAccount:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email: 
          type: string
    KeycloakCredentials:
      type: object
      required:
          - username
          - password
          - totp
      properties:
        username:
          type: string
        password:
          type: string
        totp:
          type: string
    KeycloakAccessToken:
      type: object
      required:
        - access_token
        - expires_in
        - refresh_token
        - refresh_expires_in
        - token_type
        - not-before-policy
        - session_state
        - scope
      properties:
        access_token:
          type: string
        expires_in:
          type: integer
        refresh_token:
          type: string
        refresh_expires_in:
          type: integer
        token_type:
          type: string
        not-before-policy:
          type: integer
        session_state:
          type: string
        scope:
          type: string
  responses:
    401Unauthorized:
      description: Unauthorized
    500InternalServerError:
      description: Internal Server Error
    400BadRequest:
      description: Invalid Request Parameter
    502BadGateway:
      description: Server Sent an Invalid Response
  securitySchemes:
    Username:
      type: apiKey
      in: header
      name: X-CEAI-Username
    UserRoles:
      type: apiKey
      in: header
      name: X-CEAI-UserRoles
    GatewaySecret:
      type: apiKey
      in: header
      name: X-CEAI-Gateway-Secret
paths:
  /user:
    get:
      operationId: GetUsers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '502':
          $ref: '#/components/responses/502BadGateway'
      security:
        - Username: []
          UserRoles: []
          GatewaySecret: []
    post:
      operationId: CreateUser
      description: >-
        Create a user in the environment.
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: Created
        '409':
          description: Username already exist
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '502':
          $ref: '#/components/responses/502BadGateway'
      security:
        - Username: []
          UserRoles: []
          GatewaySecret: []
  /user/{username}:
    get:
      operationId: GetUserFromUsername
      description: >-
        Get a user from its username.
      parameters:
        - name: username
          in: path
          description: The username of the targetted user.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserWithLabs'
        '404':
          description: Username does not exist
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '502':
          $ref: '#/components/responses/502BadGateway'
      security:
        - Username: []
          UserRoles: []
          GatewaySecret: []
    put:
      operationId: UpdateUser
      description: >-
        Update a user.
      parameters:
        - name: username
          in: path
          description: The username of the targetted user.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: OK
        '404':
          description: User does not exist
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '502':
          $ref: '#/components/responses/502BadGateway'
      security:
        - Username: []
          UserRoles: []
          GatewaySecret: []
    delete:
      operationId: DeleteUser
      description: >-
        Delete a user.
      parameters:
        - name: username
          in: path
          description: The username of the targetted user.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '404':
          description: Username does not exist
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServerError'
      security:
        - Username: []
          UserRoles: []
          GatewaySecret: []
  /laboratory:
    get:
      operationId: GetLaboratories
      description: >-
        Get the list of laboratories contained in the environment.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Laboratory'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '502':
          $ref: '#/components/responses/502BadGateway'
      security:
        - Username: []
          UserRoles: []
          GatewaySecret: []
    post:
      operationId: CreateLaboratory
      description: >-
        Create a laboratory.
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Laboratory'
      responses:
        '201':
          description: Created
        '409':
          description: Laboratory id already exist
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServerError'
      security:
        - Username: []
          UserRoles: []
          GatewaySecret: []
  /laboratory/{laboratoryid}:
    get:
      operationId: GetLaboratoryFromId
      description: >-
        Get a laboratory from its identifier.
      parameters:
        - name: laboratoryid
          in: path
          description: The identifier of the targetted laboratory.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Laboratory'
        '404':
          description: Laboratory id does not exist
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '502':
          $ref: '#/components/responses/502BadGateway'
      security:
        - Username: []
          UserRoles: []
          GatewaySecret: []
    put:
      operationId: UpdateLaboratory
      description: >-
        Update the attributes of a laboratory.
      parameters:
        - name: laboratoryid
          in: path
          description: The identifier of the targetted laboratory.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/LaboratoryUpdate'
      responses:
        '200':
          description: OK
        '404':
          description: Laboratory id does not exist
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '502':
          $ref: '#/components/responses/502BadGateway'
      security:
        - Username: []
          UserRoles: []
          GatewaySecret: []
    delete:
      operationId: DeleteLaboratory
      description: >-
        Deletes a laboratory. 
      parameters:
        - name: laboratoryid
          in: path
          description: The identifier of the targetted laboratory.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '404':
          description: Laboratory id does not exist
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServerError'
      security:
        - Username: []
          UserRoles: []
          GatewaySecret: []
  /laboratory/{laboratoryid}/user:
    put:
      operationId: AddLaboratoryUsers
      description: >-
        Add users to a laboratory.
      parameters:
        - name: laboratoryid
          in: path
          description: The identifier of the targetted laboratory.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: array
              items:
                type: string
                format: email
      responses:
        '200':
          description: OK
        '404':
          description: Laboratory id does not exist
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServerError'
      security:
        - Username: []
          UserRoles: []
          GatewaySecret: []
    delete:
      operationId: RemoveLaboratoryUsers
      description: >-
        Remove users from a laboratory.
      parameters:
        - name: laboratoryid
          in: path
          description: The identifier of the targetted laboratory.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: array
              items:
                type: string
                format: email
      responses:
        '200':
          description: OK
        '404':
          description: Laboratory id does not exist
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServerError'
      security:
        - Username: []
          UserRoles: []
          GatewaySecret: []
  /laboratory/{laboratoryid}/aws/{accountid}:
    put:
      operationId: AttachAwsAccountToLaboratory
      description: >-
        Attach an existing AWS account to a laboratory.
      parameters:
        - name: laboratoryid
          in: path
          description: The identifier of the targetted laboratory.
          required: true
          schema:
            type: string
        - name: accountid
          in: path
          description: The identifier of the targetted AWS account.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '404':
          description: Laboratory id or AWS account id does not exist
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServerError'
      security:
        - Username: []
          UserRoles: []
          GatewaySecret: []
    delete:
      operationId: DetachAwsAccountFromLaboratory
      description: >-
        Detach a AWS account from a laboratory.
      parameters:
        - name: laboratoryid
          in: path
          description: The identifier of the targetted laboratory.
          required: true
          schema:
            type: string
        - name: accountid
          in: path
          description: The identifier of the targetted AWS account.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '404':
          description: Laboratory or AWS account id does not exist
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServerError'
      security:
        - Username: []
          UserRoles: []
          GatewaySecret: []
  /laboratory/{laboratoryid}/openshift/{projectid}:
    put:
      operationId: AttachOpenshiftProjectToLaboratory
      description: >-
        Attach an existing Openshift project to a laboratory.
      parameters:
        - name: laboratoryid
          in: path
          description: The identifier of the targetted laboratory.
          required: true
          schema:
            type: string
        - name: projectid
          in: path
          description: The identifier of the targetted Openshift project.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '404':
          description: Laboratory id or Openshift project id does not exist
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServerError'
      security:
        - Username: []
          UserRoles: []
          GatewaySecret: []
    delete:
      operationId: DetachOpenshiftProjectFromLaboratory
      description: >-
        Detach an Openshift project from a laboratory.
      parameters:
        - name: laboratoryid
          in: path
          description: The identifier of the targetted laboratory.
          required: true
          schema:
            type: string
        - name: projectid
          in: path
          description: The identifier of the targetted Openshift project.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '404':
          description: Laboratory or Openshift project id does not exist
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServerError'
      security:
        - Username: []
          UserRoles: []
          GatewaySecret: []
  /openshift/project:
    get:
      operationId: GetOpenshiftProjects
      description: >-
       Get the list of projects defined in Openshift.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/OpenshiftProjectWithMeta'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '502':
          $ref: '#/components/responses/502BadGateway'
      security:
        - Username: []
          UserRoles: []
          GatewaySecret: []
    post:
      operationId: CreateOpenshiftProject
      description: >-
        Create a project in Openshift.
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/OpenshiftProjectWithLab'
      responses:
        '200':
          description: OK
        '409':
          description: Openshift project id already exist
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServerError'
      security:
        - Username: []
          UserRoles: []
          GatewaySecret: []
  /openshift/project/{projectid}:
    get:
      operationId: GetOpenshiftProjectFromId
      description: >-
        Get a project from its identifier in Openshift.
      parameters:
        - name: projectid
          in: path
          description: The identifier of the targetted project.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenshiftProjectWithMeta'
        '404':
          description: Openshift project id does not exist
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '502':
          $ref: '#/components/responses/502BadGateway'
      security:
        - Username: []
          UserRoles: []
          GatewaySecret: []
    put:
      operationId: UpdateOpenshiftProject
      description: >-
        Update the attributes of a project Openshift.
      parameters:
        - name: projectid
          in: path
          description: The identifier of the targetted project.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/OpenshiftProjectUpdate'
      responses:
        '200':
          description: OK
        '404':
          description: Openshift project id does not exist
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '502':
          $ref: '#/components/responses/502BadGateway'
      security:
        - Username: []
          UserRoles: []
          GatewaySecret: []
    delete:
      operationId: DeleteOpenshiftProject
      description: >-
        Delete a project in Openshift. 
      parameters:
        - name: projectid
          in: path
          description: The identifier of the targetted project.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '404':
          description: Openshift project id does not exist
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServerError'
      security:
        - Username: []
          UserRoles: []
          GatewaySecret: []
  /aws/account:
    get:
      operationId: GetAwsAccounts
      description: >-
        Get the list of all laboratories AWS accounts 
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/AWSAccount'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '502':
          $ref: '#/components/responses/502BadGateway'
      security:
        - Username: []
          UserRoles: []
          GatewaySecret: []
    post:
      operationId: CreateAWSAccount
      description: >-
        Create an AWS account
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/AWSAccount'
      responses:
        '200':
          description: OK
        '409':
          description: Account informations are not unique.
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServerError'
      security:
        - Username: []
          UserRoles: []
          GatewaySecret: []
  /aws/account/{accountid}:
    get:
      operationId: GetAwsAccount
      description: >-
        Get infos of an AWS accounts
      parameters:
        - name: accountid
          in: path
          description: The identifier of the targetted account.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AWSAccount'
        '404':
          description: AWS account id does not exist
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '502':
          $ref: '#/components/responses/502BadGateway'
      security:
        - Username: []
          UserRoles: []
          GatewaySecret: []
  /keycloak/token:
    post:
      operationId: GetKeycloakAccessToken
      description: >-
        Get a Keycloak Access Token for a specified user credentials
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/KeycloakCredentials'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeycloakAccessToken'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          description: 'Invalid user credentials'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '502':
          $ref: '#/components/responses/502BadGateway'
      security:
        - GatewaySecret: []
  /keycloak/token/refresh:
    post:
      operationId: RefreshKeycloakAccessToken
      description: >-
        Get a Keycloak Access Token for a specified user credentials
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: string
              description: A valid refresh token
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeycloakAccessToken'
        '400':
          description: 'Token is not active'
        '401':
          description: 'Bad refresh token'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '502':
          $ref: '#/components/responses/502BadGateway'
      security:
        - GatewaySecret: []
  /whoami:
    get:
      operationId: GetCurrentUserInfo
      description: >-
        Get username and roles of current authenticated user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticatedUser'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServerError'
      security:
        - Username: []
          UserRoles: []
          GatewaySecret: []
