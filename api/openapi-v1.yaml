openapi: '3.0.3'
info:
  title: API d'administration de l'infrastructure du Centre d'expertise appliquée en innovation du CQEN
  description: Cet API permet d'administrer l'infrastructure d'expérimentation afin de supporter l'offre de services de laboratoires.
  version: '1.0'
servers:
  - url: /
components:
  schemas:
    Provider:
      type: object
      properties:
        name:
          type: string
        type:
          type: string
          enum:
            - awsLandingZone
            - openshiftCluster
            - deployKF
            - githubOrganization
        description:
          type: string
        clientUUID:
          type: string
        healthy:
          type: boolean
    User:
      type: object
      required:
        - firstname
        - lastname
        - email
        - organisation
        - infrarole
      properties:
        firstname:
          type: string
        lastname:
          type: string
        email:
          type: string
          format: email
        organisation: 
          type: string
        infrarole:
          type: string
        disabled: 
          type: boolean
          default: false
    UserUpdate:
      type: object
      properties:
        firstname:
          type: string
        lastname:
          type: string
        organisation: 
          type: string
        infrarole:
          type: string
        disabled: 
          type: boolean
    UserWithLabs:
      allOf:
      - $ref: '#/components/schemas/User'
      - type: object
        properties:
          laboratories:
            type: array
            nullable: true
            items: 
              $ref: '#/components/schemas/Laboratory'
    AuthenticatedUser:
      type: object
      properties:
        username:
          type: string
        roles:
          type: string
        infrarole:
          type: string
        apirole:
          type: string
    Laboratory:
      type: object
      required: 
        - id
        - displayname
        - type
      properties:
        id:
          type: string
        displayname:
          type: string
        description:
          type: string
        gitrepo:
          type: string
        type:
          type: string
          enum:
            - projet
            - experimentation
    LaboratoryUpdate:
      type: object
      properties:
        displayname:
          type: string
        description:
          type: string
        gitrepo:
          type: string
        type:
          type: string
          enum:
            - projet
            - experimentation
    LaboratoryWithUsers:
      allOf:
        - $ref: '#/components/schemas/Laboratory'
        - type: object
          properties:
            users:
              type: array
              nullable: true
              items: 
                type: string
                format: email
    LaboratoryWithResources:
      allOf:
        - $ref: '#/components/schemas/LaboratoryWithUsers'
        - type: object
          properties:
            openshiftprojects:
              type: array
              nullable: true
              items: 
                $ref: '#/components/schemas/OpenshiftProject'
            AWSAccounts:
              type: array
              nullable: true
              items:
                $ref: '#/components/schemas/AWSAccount' 
    KubeflowNamespace:
      type: object
      required: 
        - name
      properties:
        name:
          type: string
    KubeflowNamespaceWithLab:
      allOf:
      - $ref: '#/components/schemas/KubeflowNamespace'
      - type: object
        required:
          - idLab
        properties:
          idLab:
            type: string
    KubeflowNamespaceWithMeta:
      allOf:
      - $ref: '#/components/schemas/KubeflowNamespaceWithLab'
      - type: object
        properties:
          creationDate:
            type: string
            format: date-time
    KubeflowNamespaceUpdate:
      type: object
      properties:
        idLab:
          type: string
    OpenshiftProject:
      type: object
      required: 
        - name
        - displayname
        - description
      properties:
        name:
          type: string
        displayname:
          type: string
        description:
          type: string
    OpenshiftProjectWithLab:
      allOf:
      - $ref: '#/components/schemas/OpenshiftProject'
      - type: object
        required:
          - idLab
        properties:
          idLab:
            type: string
    OpenshiftProjectWithMeta:
      allOf:
      - $ref: '#/components/schemas/OpenshiftProjectWithLab'
      - type: object
        properties:
          requester:
            type: string
          creationDate:
            type: string
            format: date-time
    OpenshiftProjectUpdate:
      type: object
      properties:
        displayname:
          type: string
        description:
          type: string
        idLab:
          type: string
    AWSAccount:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email: 
          type: string
    KeycloakCredentials:
      type: object
      required:
          - username
          - password
          - totp
      properties:
        username:
          type: string
        password:
          type: string
        totp:
          type: string
    KeycloakAccessToken:
      type: object
      required:
        - access_token
        - expires_in
        - refresh_token
        - refresh_expires_in
        - token_type
        - not-before-policy
        - session_state
        - scope
      properties:
        access_token:
          type: string
        expires_in:
          type: integer
        refresh_token:
          type: string
        refresh_expires_in:
          type: integer
        token_type:
          type: string
        not-before-policy:
          type: integer
        session_state:
          type: string
        scope:
          type: string
  responses:
    401Unauthorized:
      description: Unauthorized
    500InternalServerError:
      description: Internal Server Error
    400BadRequest:
      description: Invalid Request Parameter
    502BadGateway:
      description: Server Sent an Invalid Response
  securitySchemes:
    Username:
      type: apiKey
      in: header
      name: X-CEAI-Username
    UserRoles:
      type: apiKey
      in: header
      name: X-CEAI-UserRoles
    GatewaySecret:
      type: apiKey
      in: header
      name: X-CEAI-Gateway-Secret
paths:
  /user:
    get:
      operationId: GetUsers
      description: >-
        Liste tout les usagers.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '502':
          $ref: '#/components/responses/502BadGateway'
      security:
        - Username: []
          UserRoles: []
          GatewaySecret: []
    post:
      operationId: CreateUser
      description: >-
        Créer un usager.
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: Created
        '409':
          description: Username already exist
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '502':
          $ref: '#/components/responses/502BadGateway'
      security:
        - Username: []
          UserRoles: []
          GatewaySecret: []
  /user/{username}:
    get:
      operationId: GetUserFromUsername
      description: >-
        Obtenir un usager à partir de son nom d'usager.
      parameters:
        - name: username
          in: path
          description: Le nom d'usager de l'usager ciblé.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserWithLabs'
        '404':
          description: Username does not exist
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '502':
          $ref: '#/components/responses/502BadGateway'
      security:
        - Username: []
          UserRoles: []
          GatewaySecret: []
    put:
      operationId: UpdateUser
      description: >-
        Mettre à jour les attributs d'un usager.
      parameters:
        - name: username
          in: path
          description: Le nom d'usager de l'usager ciblé.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: OK
        '404':
          description: User does not exist
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '502':
          $ref: '#/components/responses/502BadGateway'
      security:
        - Username: []
          UserRoles: []
          GatewaySecret: []
    delete:
      operationId: DeleteUser
      description: >-
        Supprimer un usager.
      parameters:
        - name: username
          in: path
          description: Le nom d'usager de l'usager ciblé.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '404':
          description: Username does not exist
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServerError'
      security:
        - Username: []
          UserRoles: []
          GatewaySecret: []
  /user/{username}/credential/{credentialType}:
    delete:
      operationId: ResetUserCredential
      description: >-
        Supprimer une donnée d'accès d'un usager et envoyer un courriel de réinitialisation.
      parameters:
        - name: username
          in: path
          description: Le nom d'usager de l'usager ciblé.
          required: true
          schema:
            type: string
        - name: credentialType
          in: path
          description: La donnée d'accès à supprimer (password, otp, all).
          required: true
          schema:
            type: string
            enum:
              - password
              - otp
              - all
      responses:
        '200':
          description: OK
        '404':
          description: Username does not exist
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServerError'
      security:
        - Username: []
          UserRoles: []
          GatewaySecret: []
  /user/{username}/actionEmail:
    post:
      operationId: SendRequiredActionEmail
      description: >-
        Envoyer un courriel d'action requise à un usager.
      parameters:
        - name: username
          in: path
          description: Le nom d'usager de l'usager ciblé.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '404':
          description: Username does not exist
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServerError'
      security:
        - Username: []
          UserRoles: []
          GatewaySecret: []
  /laboratory:
    get:
      operationId: GetLaboratories
      description: >-
        Obtenir la liste des laboratoires.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Laboratory'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '502':
          $ref: '#/components/responses/502BadGateway'
      security:
        - Username: []
          UserRoles: []
          GatewaySecret: []
    post:
      operationId: CreateLaboratory
      description: >-
        Créer un laboratoire.
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Laboratory'
      responses:
        '201':
          description: Created
        '409':
          description: Laboratory id already exist
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServerError'
      security:
        - Username: []
          UserRoles: []
          GatewaySecret: []
  /laboratory/{laboratoryid}:
    get:
      operationId: GetLaboratoryFromId
      description: >-
        Obtenir un laboratoire à partir de son identifiant.
      parameters:
        - name: laboratoryid
          in: path
          description: L'identifiant du laboratoire.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LaboratoryWithResources'
        '404':
          description: Laboratory id does not exist
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '502':
          $ref: '#/components/responses/502BadGateway'
      security:
        - Username: []
          UserRoles: []
          GatewaySecret: []
    put:
      operationId: UpdateLaboratory
      description: >-
        Mettre à jour les attributs d'un laboratoire.
      parameters:
        - name: laboratoryid
          in: path
          description: L'identifiant du laboratoire.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/LaboratoryUpdate'
      responses:
        '200':
          description: OK
        '404':
          description: Laboratory id does not exist
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '502':
          $ref: '#/components/responses/502BadGateway'
      security:
        - Username: []
          UserRoles: []
          GatewaySecret: []
    delete:
      operationId: DeleteLaboratory
      description: >-
        Supprimer un laboratoire.
      parameters:
        - name: laboratoryid
          in: path
          description: L'identifiant du laboratoire.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '404':
          description: Laboratory id does not exist
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServerError'
      security:
        - Username: []
          UserRoles: []
          GatewaySecret: []
  /laboratory/{laboratoryid}/user:
    put:
      operationId: AddLaboratoryUsers
      description: >-
        Ajouter des usagers à un laboratoire.
      parameters:
        - name: laboratoryid
          in: path
          description: L'identifiant du laboratoire.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: Liste des courriels des usagers à ajouter.
        content:
          'application/json':
            schema:
              type: array
              items:
                type: string
                format: email
      responses:
        '200':
          description: OK
        '404':
          description: Laboratory id does not exist
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServerError'
      security:
        - Username: []
          UserRoles: []
          GatewaySecret: []
    delete:
      operationId: RemoveLaboratoryUsers
      description: >-
        Retirer des usagers d'un laboratoire.
      parameters:
        - name: laboratoryid
          in: path
          description: L'identifiant du laboratoire.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: Liste des courriels des usagers à retirer.
        content:
          'application/json':
            schema:
              type: array
              items:
                type: string
                format: email
      responses:
        '200':
          description: OK
        '404':
          description: Laboratory id does not exist
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServerError'
      security:
        - Username: []
          UserRoles: []
          GatewaySecret: []
  /laboratory/{laboratoryid}/aws/{accountid}:
    put:
      operationId: AttachAwsAccountToLaboratory
      description: >-
        Associer un compte AWS à un laboratoire.
      parameters:
        - name: laboratoryid
          in: path
          description: L'identifiant du laboratoire.
          required: true
          schema:
            type: string
        - name: accountid
          in: path
          description: L'identifiant du compte AWS.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '404':
          description: Laboratory id or AWS account id does not exist
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServerError'
      security:
        - Username: []
          UserRoles: []
          GatewaySecret: []
    delete:
      operationId: DetachAwsAccountFromLaboratory
      description: >-
        Dissocier un compte AWS d'un laboratoire.
      parameters:
        - name: laboratoryid
          in: path
          description: L'identifiant du laboratoire ciblé.
          required: true
          schema:
            type: string
        - name: accountid
          in: path
          description: L'identifiant du compte AWS ciblé.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '404':
          description: Laboratory or AWS account id does not exist
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServerError'
      security:
        - Username: []
          UserRoles: []
          GatewaySecret: []
  /laboratory/{laboratoryid}/openshift/{projectid}:
    put:
      operationId: AttachOpenshiftProjectToLaboratory
      description: >-
        Associer un projet Openshift à un laboratoire.
      parameters:
        - name: laboratoryid
          in: path
          description: L'identifiant du laboratoire.
          required: true
          schema:
            type: string
        - name: projectid
          in: path
          description: L'identifiant du projet Openshift.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '404':
          description: Laboratory id or Openshift project id does not exist
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServerError'
      security:
        - Username: []
          UserRoles: []
          GatewaySecret: []
    delete:
      operationId: DetachOpenshiftProjectFromLaboratory
      description: >-
        Dissocier un projet Openshift d'un laboratoire.
      parameters:
        - name: laboratoryid
          in: path
          description: L'identifiant du laboratoire ciblé.
          required: true
          schema:
            type: string
        - name: projectid
          in: path
          description: L'identifiant du projet Openshift ciblé.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '404':
          description: Laboratory or Openshift project id does not exist
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServerError'
      security:
        - Username: []
          UserRoles: []
          GatewaySecret: []
  /openshift/project:
    get:
      operationId: GetOpenshiftProjects
      description: >-
       Obtenir la liste des projets Openshift.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/OpenshiftProjectWithMeta'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '502':
          $ref: '#/components/responses/502BadGateway'
      security:
        - Username: []
          UserRoles: []
          GatewaySecret: []
    post:
      operationId: CreateOpenshiftProject
      description: >-
        Créer un projet Openshift.
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/OpenshiftProjectWithLab'
      responses:
        '201':
          description: Created
        '409':
          description: Openshift project id already exist
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServerError'
      security:
        - Username: []
          UserRoles: []
          GatewaySecret: []
  /openshift/project/{projectid}:
    get:
      operationId: GetOpenshiftProjectFromId
      description: >-
        Obtenir un projet Openshift à partir de son identifiant.
      parameters:
        - name: projectid
          in: path
          description: L'identifiant du projet Openshift.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenshiftProjectWithMeta'
        '404':
          description: Openshift project id does not exist
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '502':
          $ref: '#/components/responses/502BadGateway'
      security:
        - Username: []
          UserRoles: []
          GatewaySecret: []
    put:
      operationId: UpdateOpenshiftProject
      description: >-
        Mettre à jour les attributs d'un projet Openshift.
      parameters:
        - name: projectid
          in: path
          description: L'identifiant du projet Openshift.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/OpenshiftProjectUpdate'
      responses:
        '200':
          description: OK
        '404':
          description: Openshift project id does not exist
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '502':
          $ref: '#/components/responses/502BadGateway'
      security:
        - Username: []
          UserRoles: []
          GatewaySecret: []
    delete:
      operationId: DeleteOpenshiftProject
      description: >-
        Supprimer un projet Openshift.
      parameters:
        - name: projectid
          in: path
          description: L'identifiant du projet Openshift.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '404':
          description: Openshift project id does not exist
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServerError'
      security:
        - Username: []
          UserRoles: []
          GatewaySecret: []
  /aws/account:
    get:
      operationId: GetAwsAccounts
      description: >-
        Obtenir la liste des comptes AWS.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/AWSAccount'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '502':
          $ref: '#/components/responses/502BadGateway'
      security:
        - Username: []
          UserRoles: []
          GatewaySecret: []
  /aws/account/{accountid}:
    get:
      operationId: GetAwsAccount
      description: >-
        Obtenir un compte AWS à partir de son identifiant.
      parameters:
        - name: accountid
          in: path
          description: L'identifiant du compte AWS.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AWSAccount'
        '404':
          description: AWS account id does not exist
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '502':
          $ref: '#/components/responses/502BadGateway'
      security:
        - Username: []
          UserRoles: []
          GatewaySecret: []
  /keycloak/token:
    post:
      operationId: GetKeycloakAccessToken
      description: >-
        Obtenir un jeton d'accès Keycloak pour les données d'accès spécifiées.
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/KeycloakCredentials'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeycloakAccessToken'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          description: 'Invalid user credentials'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '502':
          $ref: '#/components/responses/502BadGateway'
      security:
        - GatewaySecret: []
  /keycloak/token/refresh:
    post:
      operationId: RefreshKeycloakAccessToken
      description: >-
        Obtenir un nouveau jeton d'accès Keycloak à partir d'un jeton de rafraîchissement valide.
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: string
              description: Un jeton de rafraîchissement valide.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeycloakAccessToken'
        '400':
          description: 'Token is not active'
        '401':
          description: 'Bad refresh token'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '502':
          $ref: '#/components/responses/502BadGateway'
      security:
        - GatewaySecret: []
  /whoami:
    get:
      operationId: GetCurrentUserInfo
      description: >-
        Obtenir les informations de l'usager courant.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticatedUser'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServerError'
      security:
        - Username: []
          UserRoles: []
          GatewaySecret: []
