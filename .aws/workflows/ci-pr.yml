version: 0.2

env:
  variables:
    GO_VERSION: 1.19
  secrets-manager:
    AWS_SNYK_AUTH_TOKEN: "API-token-snyk:SNYK_AUTH_TOKEN_RP"  

phases:
  install:
    commands:      
      - echo "in the install phase"
      - npm install -g snyk
      - wget https://storage.googleapis.com/golang/go${GO_VERSION}.linux-amd64.tar.gz
      - tar -C /usr/local -xzf go${GO_VERSION}.linux-amd64.tar.gz
      - export PATH="/usr/local/go/bin:$PATH" && export GOPATH="$HOME/go" && export PATH="$GOPATH/bin:$PATH"
      # install govulncheck to scan code
      - go install golang.org/x/vuln/cmd/govulncheck@latest   
      - workdir=`pwd`
      - echo $workdir
      - ls -la 
      #- cp govulncheck /usr/local/bin  
      - currentphase="install"
  # pre_build:
  #   commands:
  #     - echo "inside pre_build stage"
  #     - echo "stage pre_build completed"
  build:
    run-as: Linux-user-name
    on-failure: CONTINUE  
    commands:
      - echo Build started on `date`
      - echo trying to build go project...
      - pwd
      - ls -la
      - currentphase="goBuild"
      - go build -o ./ceai ./cmd/cli
      - echo gopath $GOPATH
      # Vulnerability detection using govulncheck
      #- govulncheck
      - which govulncheck
      #- .$GOPATH/bin/govulncheck ./...
      - echo trying to execute govulncheck on project
      #- .$GOPATH/bin/govulncheck -json ./...
      #- govulncheck -json ./...
      - cd $GOPATH/bin      
      - pwd
      - currentphase="govulncheck"
      - govulncheck
      - cd $workdir
      - pwd
      # Snyk Auth using API token
      # - echo "about to set AWS snyk auth token..."
      # - snyk config set api=$AWS_SNYK_AUTH_TOKEN
      # - echo "snyk scan open-source code"
      # - snyk test --json > snyk-results-open-source.json
      #- echo "snyk scan code"
      #- snyk code test --json > snyk-results-code.json
      - echo after govulncheck...
      - pwd
      - ls -la
    finally:
      - echo will continue process even if there are errors...      
      - echo currentphase $currentphase
  post_build:
    commands:
      - echo Build completed on `date`
      # - |
      #   jq "{ \"messageType\": \"CodeScanReport\", \"reportType\": \"SNYK\", \
      #   \"createdAt\": $(date +\"%Y-%m-%dT%H:%M:%S.%3NZ\"), \"source_repository\": env.CODEBUILD_SOURCE_REPO_URL, \
      #   \"source_branch\": env.CODEBUILD_SOURCE_VERSION, \
      #   \"build_id\": env.CODEBUILD_BUILD_ID, \
      #   \"source_commitid\": env.CODEBUILD_RESOLVED_SOURCE_VERSION, \
      #   \"report\": . }" snyk-results-open-source.json > snyk-scan-results-open-source.json
      # - echo ""
      # - |
      # # - |
      # #   jq "{ \"messageType\": \"CodeScanReport\", \"reportType\": \"SNYK\", \
      # #   \"createdAt\": $(date +\"%Y-%m-%dT%H:%M:%S.%3NZ\"), \"source_repository\": env.CODEBUILD_SOURCE_REPO_URL, \
      # #   \"source_branch\": env.CODEBUILD_SOURCE_VERSION, \
      # #   \"build_id\": env.CODEBUILD_BUILD_ID, \
      # #   \"source_commitid\": env.CODEBUILD_RESOLVED_SOURCE_VERSION, \
      # #   \"report\": . }" snyk-results-code.json > snyk-scan-results-code.json
      # # - echo ""
      # # - |   
      - echo list of elements before ending process
      - ls -la   
#artifacts:
  #files:
    #- admin-api.jar
    #- snyk-scan-results-open-source.json
    #- snyk-scan-results-code.json