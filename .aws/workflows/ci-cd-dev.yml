version: 0.2

env:
  variables:
    APP_NAME: "ceai-admin-api"
    ECR_REPO_NAME: "ceai-admin-api-codebuild-ecr"    
    CODE_COMMIT_REPO_NAME: "ceai-admin-api-dev-cc-repo"
    ECS_CONTAINER_NAME: "ceai-admin-api-dev-container"
    REPOSITORY_URI: 131485263174.dkr.ecr.ca-central-1.amazonaws.com/$ECR_REPO_NAME
  secrets-manager:
    KUBECONFIG_FILE: arn:aws:secretsmanager:ca-central-1:131485263174:secret:ceai-admin-api/openshift/kubeconfig-UAtGE2

phases:
  install:
    runtime-versions:
      golang: 1.18  
    commands:      
      - echo "in the install phase"
      # copy secret kubeconfig to file kubeconfig
      - echo $KUBECONFIG_FILE > openshift/kubeconfig
      # install govulncheck to scan code
      - echo install govulncheck
      - go install golang.org/x/vuln/cmd/govulncheck@latest            
  pre_build:
    commands:
      # Vulnerability detection using govulncheck
      - echo scan vulnerabilities with govulncheck
      - govulncheck -json ./... > govulncheck-scan-results.json
      # login to aws ecr
      - aws ecr get-login-password --region ca-central-1 | docker login --username AWS --password-stdin 131485263174.dkr.ecr.ca-central-1.amazonaws.com
  build:
    commands:
      - echo Build started on `date`
      - go build -o ./ceai ./cmd/cli
      # docker
      - IMAGE_TAG=`echo $CODEBUILD_BUILD_NUMBER`
      - echo IMAGE_TAG $IMAGE_TAG
      - echo Building the Docker image...          
      - docker build -t $APP_NAME:$IMAGE_TAG .      
      - docker tag $APP_NAME:$IMAGE_TAG $REPOSITORY_URI:$IMAGE_TAG 
      - docker tag $APP_NAME:$IMAGE_TAG $REPOSITORY_URI:latest
  post_build:
    commands:
      - echo Build completed on `date`
      # docker
      - echo Pushing the Docker image...
      - docker push $REPOSITORY_URI:latest
      - docker push $REPOSITORY_URI:$IMAGE_TAG       
      # get results from aws ecr docker image scan
      - cd .aws/workflows
      - chmod 777 scan-image.sh
      - RESULTS_FILENAME=`echo scan-results-$IMAGE_TAG.out`
      - echo RESULTS_FILENAME $RESULTS_FILENAME
      - echo "will try to get the ECR scan image results"
      - ./scan-image.sh $IMAGE_TAG $ECR_REPO_NAME
      - echo CODEBUILD_BUILD_SUCCEEDING $CODEBUILD_BUILD_SUCCEEDING   
      # imagedefinitions.json file for codeCommit    
      - echo writing image definitions file...
      - cd ../../
      - echo ECS_CONTAINER_NAME $ECS_CONTAINER_NAME   
      - printf '[{"name":"%s","imageUri":"%s"}]' $ECS_CONTAINER_NAME $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json
      - ls -la
artifacts:
  files:
    - govulncheck-scan-results.json
    - .aws/workflows/*.out
    - imagedefinitions.json